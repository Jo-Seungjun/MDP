
AVRASM ver. 2.1.30  C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm Thu May 03 17:11:09 2018

C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm(1097): warning: Register r5 already defined by the .DEF directive
C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm(1098): warning: Register r4 already defined by the .DEF directive
C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm(1099): warning: Register r7 already defined by the .DEF directive
C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm(1100): warning: Register r6 already defined by the .DEF directive
C:\workspaces\MDP\Ω«Ω¿¿œ¡ˆ\¡∂Ω¬¡ÿ\20180501_¡∂Ω¬¡ÿ\baud9600 atmega128\Debug\List\serial.asm(1101): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _data0=R5
                 	.DEF _data1=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0054 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0084 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 008d 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2020003:
00004f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000050 0002      	.DW  0x02
000051 0500      	.DW  __base_y_G101
000052 009e      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000053 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000054 94f8      	CLI
000055 27ee      	CLR  R30
000056 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000057 e0f1      	LDI  R31,1
000058 bff5      	OUT  MCUCR,R31
000059 bfe5      	OUT  MCUCR,R30
00005a 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e0a0      	LDI  R26,LOW(__SRAM_START)
000065 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000066 93ed      	ST   X+,R30
000067 9701      	SBIW R24,1
000068 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000069 eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006b 9185      	LPM  R24,Z+
00006c 9195      	LPM  R25,Z+
00006d 9700      	SBIW R24,0
00006e f061      	BREQ __GLOBAL_INI_END
00006f 91a5      	LPM  R26,Z+
000070 91b5      	LPM  R27,Z+
000071 9005      	LPM  R0,Z+
000072 9015      	LPM  R1,Z+
000073 01bf      	MOVW R22,R30
000074 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000075 9005      	LPM  R0,Z+
000076 920d      	ST   X+,R0
000077 9701      	SBIW R24,1
000078 f7e1      	BRNE __GLOBAL_INI_LOOP
000079 01fb      	MOVW R30,R22
00007a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00007b bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007d bfed      	OUT  SPL,R30
00007e e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000080 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000081 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000082 940c 00dd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;
                 ;#define BUF_SIZE 16
                 ;#define QUEUE_SIZE 32
                 ;
                 ;void tx_trans(int, char);
                 ;
                 ;volatile unsigned char sbuf[BUF_SIZE];
                 ;
                 ;char data0, data1;
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void){
                 ; 0000 000F interrupt [19] void usart0_rx_isr(void){
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000084 d0db      	RCALL SUBOPT_0x0
                 ; 0000 0010     //char data0;
                 ; 0000 0011     //char status, data;
                 ; 0000 0012     //status = UCSR0A;
                 ; 0000 0013     data0 = UDR0;
000085 b05c      	IN   R5,12
                 ; 0000 0014     tx_trans(1,data0);
000086 e0e1      	LDI  R30,LOW(1)
000087 e0f0      	LDI  R31,HIGH(1)
000088 93fa      	ST   -Y,R31
000089 93ea      	ST   -Y,R30
00008a 2da5      	MOV  R26,R5
00008b d01a      	RCALL _tx_trans
                 ; 0000 0015     //lcd_putchar(data0);
                 ; 0000 0016     //qput0(UDR0);
                 ; 0000 0017 }
00008c c00b      	RJMP _0x16
                 ; .FEND
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void){
                 ; 0000 0019 interrupt [31] void usart1_rx_isr(void){
                 _usart1_rx_isr:
                 ; .FSTART _usart1_rx_isr
00008d d0d2      	RCALL SUBOPT_0x0
                 ; 0000 001A     //char status, data;
                 ; 0000 001B     //status = UCSR01A;
                 ; 0000 001C     //char data1;
                 ; 0000 001D     //status = UCSR1A;
                 ; 0000 001E     data1 = UDR1;
00008e 9040 009c 	LDS  R4,156
                 ; 0000 001F     tx_trans(0,data1);
000090 e0e0      	LDI  R30,LOW(0)
000091 e0f0      	LDI  R31,HIGH(0)
000092 93fa      	ST   -Y,R31
000093 93ea      	ST   -Y,R30
000094 2da4      	MOV  R26,R4
000095 d010      	RCALL _tx_trans
                 ; 0000 0020     lcd_putchar(data1);
000096 2da4      	MOV  R26,R4
000097 d08a      	RCALL _lcd_putchar
                 ; 0000 0021     //qput0(UDR1);
                 ; 0000 0022 }
                 _0x16:
000098 91e9      	LD   R30,Y+
000099 bfef      	OUT  SREG,R30
00009a 91f9      	LD   R31,Y+
00009b 91e9      	LD   R30,Y+
00009c 91b9      	LD   R27,Y+
00009d 91a9      	LD   R26,Y+
00009e 9199      	LD   R25,Y+
00009f 9189      	LD   R24,Y+
0000a0 9179      	LD   R23,Y+
0000a1 9169      	LD   R22,Y+
0000a2 90f9      	LD   R15,Y+
0000a3 9019      	LD   R1,Y+
0000a4 9009      	LD   R0,Y+
0000a5 9518      	RETI
                 ; .FEND
                 ;
                 ;void tx_trans(int tx_port, char data){
                 ; 0000 0024 void tx_trans(int tx_port, char data){
                 _tx_trans:
                 ; .FSTART _tx_trans
                 ; 0000 0025     switch(tx_port)
0000a6 d0d2      	RCALL __SAVELOCR4
0000a7 2f1a      	MOV  R17,R26
                +
0000a8 812c     +LDD R18 , Y + 4
0000a9 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	tx_port -> R18,R19
                 ;	data -> R17
0000aa 01f9      	MOVW R30,R18
                 ; 0000 0026     {
                 ; 0000 0027         case 0:
0000ab 9730      	SBIW R30,0
0000ac f421      	BRNE _0x6
                 ; 0000 0028             //while(!(UCSR1A & 0x80));
                 ; 0000 0029             while(!(UCSR0A & 0x20));
                 _0x7:
0000ad 9b5d      	SBIS 0xB,5
0000ae cffe      	RJMP _0x7
                 ; 0000 002A             UDR0 = data;
0000af b91c      	OUT  0xC,R17
                 ; 0000 002B             break;
0000b0 c00a      	RJMP _0x5
                 ; 0000 002C         case 1:
                 _0x6:
0000b1 30e1      	CPI  R30,LOW(0x1)
0000b2 e0a0      	LDI  R26,HIGH(0x1)
0000b3 07fa      	CPC  R31,R26
0000b4 f431      	BRNE _0xE
                 ; 0000 002D             //while(!(UCSR0A & 0x80));
                 ; 0000 002E             while(!(UCSR1A & 0x20));
                 _0xB:
0000b5 91e0 009b 	LDS  R30,155
0000b7 72e0      	ANDI R30,LOW(0x20)
0000b8 f3e1      	BREQ _0xB
                 ; 0000 002F             UDR1 = data;
0000b9 9310 009c 	STS  156,R17
                 ; 0000 0030             break;
                 ; 0000 0031         default:
                 _0xE:
                 ; 0000 0032             break;
                 ; 0000 0033     }
                 _0x5:
                 ; 0000 0034 }
0000bb d0c2      	RCALL __LOADLOCR4
0000bc 9626      	ADIW R28,6
0000bd 9508      	RET
                 ; .FEND
                 ;
                 ;void tx_str_trans(int tx_port, unsigned char *tx_str){
                 ; 0000 0036 void tx_str_trans(int tx_port, unsigned char *tx_str){
                 ; 0000 0037     int i = 0;
                 ; 0000 0038     while(*(tx_str+i) != '\0')
                 ;	tx_port -> R20,R21
                 ;	*tx_str -> R18,R19
                 ;	i -> R16,R17
                 ; 0000 0039     {
                 ; 0000 003A         tx_trans(tx_port,*(tx_str+i));
                 ; 0000 003B         i++;
                 ; 0000 003C     }
                 ; 0000 003D }
                 ;
                 ;void init(){
                 ; 0000 003F void init(){
                 _init:
                 ; .FSTART _init
                 ; 0000 0040     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0000be e0e0      	LDI  R30,LOW(0)
0000bf b9eb      	OUT  0xB,R30
                 ; 0000 0041     UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000c0 e9e8      	LDI  R30,LOW(152)
0000c1 b9ea      	OUT  0xA,R30
                 ; 0000 0042     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0000c2 e0e6      	LDI  R30,LOW(6)
0000c3 93e0 0095 	STS  149,R30
                 ; 0000 0043     UBRR0H=0x00;
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 93e0 0090 	STS  144,R30
                 ; 0000 0044     UBRR0L=0x67;
0000c8 e6e7      	LDI  R30,LOW(103)
0000c9 b9e9      	OUT  0x9,R30
                 ; 0000 0045 
                 ; 0000 0046     UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb 93e0 009b 	STS  155,R30
                 ; 0000 0047     UCSR1B=(1<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
0000cd e9e8      	LDI  R30,LOW(152)
0000ce 93e0 009a 	STS  154,R30
                 ; 0000 0048     UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
0000d0 e0e6      	LDI  R30,LOW(6)
0000d1 93e0 009d 	STS  157,R30
                 ; 0000 0049     UBRR1H=0x00;
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93e0 0098 	STS  152,R30
                 ; 0000 004A     UBRR1L=0x67;
0000d6 e6e7      	LDI  R30,LOW(103)
0000d7 93e0 0099 	STS  153,R30
                 ; 0000 004B 
                 ; 0000 004C     lcd_init(16);
0000d9 e1a0      	LDI  R26,LOW(16)
0000da d05a      	RCALL _lcd_init
                 ; 0000 004D     #asm("sei")
0000db 9478      	SEI
                 ; 0000 004E }
0000dc 9508      	RET
                 ; .FEND
                 ;
                 ;void main(){
                 ; 0000 0050 void main(){
                 _main:
                 ; .FSTART _main
                 ; 0000 0051     init();
0000dd dfe0      	RCALL _init
                 ; 0000 0052 
                 ; 0000 0053     lcd_init(16);
0000de e1a0      	LDI  R26,LOW(16)
0000df d055      	RCALL _lcd_init
                 ; 0000 0054     lcd_clear();
0000e0 d037      	RCALL _lcd_clear
                 ; 0000 0055 
                 ; 0000 0056     while(1)
                 _0x12:
                 ; 0000 0057     {
                 ; 0000 0058     }
0000e1 cfff      	RJMP _0x12
                 ; 0000 0059 }
                 _0x15:
0000e2 cfff      	RJMP _0x15
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0000e3 931a      	ST   -Y,R17
0000e4 2f1a      	MOV  R17,R26
0000e5 b3eb      	IN   R30,0x1B
0000e6 70ef      	ANDI R30,LOW(0xF)
0000e7 2fae      	MOV  R26,R30
0000e8 2fe1      	MOV  R30,R17
0000e9 7fe0      	ANDI R30,LOW(0xF0)
0000ea 2bea      	OR   R30,R26
0000eb bbeb      	OUT  0x1B,R30
                +
0000ec e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ed 958a     +DEC R24
0000ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000ef 9adb      	SBI  0x1B,3
                +
0000f0 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f1 958a     +DEC R24
0000f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f3 98db      	CBI  0x1B,3
                +
0000f4 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f5 958a     +DEC R24
0000f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f7 c066      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f8 93aa      	ST   -Y,R26
0000f9 81a8      	LD   R26,Y
0000fa dfe8      	RCALL __lcd_write_nibble_G101
0000fb 81e8          ld    r30,y
0000fc 95e2          swap  r30
0000fd 83e8          st    y,r30
0000fe 81a8      	LD   R26,Y
0000ff dfe3      	RCALL __lcd_write_nibble_G101
                +
000100 ec88     +LDI R24 , LOW ( 200 )
000101 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000102 9701     +SBIW R24 , 1
000103 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000104 9621      	ADIW R28,1
000105 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000106 931a      	ST   -Y,R17
000107 930a      	ST   -Y,R16
000108 2f1a      	MOV  R17,R26
000109 810a      	LDD  R16,Y+2
00010a 2fe1      	MOV  R30,R17
00010b e0f0      	LDI  R31,0
00010c 50e0      	SUBI R30,LOW(-__base_y_G101)
00010d 4ffb      	SBCI R31,HIGH(-__base_y_G101)
00010e 81e0      	LD   R30,Z
00010f 0fe0      	ADD  R30,R16
000110 2fae      	MOV  R26,R30
000111 dfe6      	RCALL __lcd_write_data
000112 2e70      	MOV  R7,R16
000113 2e61      	MOV  R6,R17
000114 8119      	LDD  R17,Y+1
000115 8108      	LDD  R16,Y+0
000116 9623      	ADIW R28,3
000117 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000118 e0a2      	LDI  R26,LOW(2)
000119 d054      	RCALL SUBOPT_0x1
00011a e0ac      	LDI  R26,LOW(12)
00011b dfdc      	RCALL __lcd_write_data
00011c e0a1      	LDI  R26,LOW(1)
00011d d050      	RCALL SUBOPT_0x1
00011e e0e0      	LDI  R30,LOW(0)
00011f 2e6e      	MOV  R6,R30
000120 2e7e      	MOV  R7,R30
000121 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000122 931a      	ST   -Y,R17
000123 2f1a      	MOV  R17,R26
000124 301a      	CPI  R17,10
000125 f011      	BREQ _0x2020005
000126 1479      	CP   R7,R9
000127 f038      	BRLO _0x2020004
                 _0x2020005:
000128 e0e0      	LDI  R30,LOW(0)
000129 93ea      	ST   -Y,R30
00012a 9463      	INC  R6
00012b 2da6      	MOV  R26,R6
00012c dfd9      	RCALL _lcd_gotoxy
00012d 301a      	CPI  R17,10
00012e f179      	BREQ _0x2080001
                 _0x2020004:
00012f 9473      	INC  R7
000130 9ad9      	SBI  0x1B,1
000131 2fa1      	MOV  R26,R17
000132 dfc5      	RCALL __lcd_write_data
000133 98d9      	CBI  0x1B,1
000134 c029      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000135 931a      	ST   -Y,R17
000136 2f1a      	MOV  R17,R26
000137 b3ea      	IN   R30,0x1A
000138 6fe0      	ORI  R30,LOW(0xF0)
000139 bbea      	OUT  0x1A,R30
00013a 9ad3      	SBI  0x1A,3
00013b 9ad1      	SBI  0x1A,1
00013c 9ad2      	SBI  0x1A,2
00013d 98db      	CBI  0x1B,3
00013e 98d9      	CBI  0x1B,1
00013f 98da      	CBI  0x1B,2
000140 2e91      	MOV  R9,R17
000141 2fe1      	MOV  R30,R17
000142 58e0      	SUBI R30,-LOW(128)
                +
000143 93e0 0502+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000145 2fe1      	MOV  R30,R17
000146 54e0      	SUBI R30,-LOW(192)
                +
000147 93e0 0503+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000149 e1a4      	LDI  R26,LOW(20)
00014a e0b0      	LDI  R27,0
00014b d037      	RCALL _delay_ms
00014c d025      	RCALL SUBOPT_0x2
00014d d024      	RCALL SUBOPT_0x2
00014e d023      	RCALL SUBOPT_0x2
00014f e2a0      	LDI  R26,LOW(32)
000150 df92      	RCALL __lcd_write_nibble_G101
                +
000151 e980     +LDI R24 , LOW ( 400 )
000152 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000153 9701     +SBIW R24 , 1
000154 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000155 e2a8      	LDI  R26,LOW(40)
000156 dfa1      	RCALL __lcd_write_data
000157 e0a4      	LDI  R26,LOW(4)
000158 df9f      	RCALL __lcd_write_data
000159 e8a5      	LDI  R26,LOW(133)
00015a df9d      	RCALL __lcd_write_data
00015b e0a6      	LDI  R26,LOW(6)
00015c df9b      	RCALL __lcd_write_data
00015d dfba      	RCALL _lcd_clear
                 _0x2080001:
00015e 9119      	LD   R17,Y+
00015f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
000160 920a      	ST   -Y,R0
000161 921a      	ST   -Y,R1
000162 92fa      	ST   -Y,R15
000163 936a      	ST   -Y,R22
000164 937a      	ST   -Y,R23
000165 938a      	ST   -Y,R24
000166 939a      	ST   -Y,R25
000167 93aa      	ST   -Y,R26
000168 93ba      	ST   -Y,R27
000169 93ea      	ST   -Y,R30
00016a 93fa      	ST   -Y,R31
00016b b7ef      	IN   R30,SREG
00016c 93ea      	ST   -Y,R30
00016d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00016e df89      	RCALL __lcd_write_data
00016f e0a3      	LDI  R26,LOW(3)
000170 e0b0      	LDI  R27,0
000171 c011      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000172 e3a0      	LDI  R26,LOW(48)
000173 df6f      	RCALL __lcd_write_nibble_G101
                +
000174 e980     +LDI R24 , LOW ( 400 )
000175 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000176 9701     +SBIW R24 , 1
000177 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000178 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000179 933a      	ST   -Y,R19
                 __SAVELOCR3:
00017a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00017b 931a      	ST   -Y,R17
00017c 930a      	ST   -Y,R16
00017d 9508      	RET
                 
                 __LOADLOCR4:
00017e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00017f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000180 8119      	LDD  R17,Y+1
000181 8108      	LD   R16,Y
000182 9508      	RET
                 
                 _delay_ms:
000183 9610      	adiw r26,0
000184 f039      	breq __delay_ms1
                 __delay_ms0:
000185 95a8      	wdr
                +
000186 ea80     +LDI R24 , LOW ( 0xFA0 )
000187 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000188 9701     +SBIW R24 , 1
000189 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00018a 9711      	sbiw r26,1
00018b f7c9      	brne __delay_ms0
                 __delay_ms1:
00018c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   7 r17:  24 r18:   4 r19:   3 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  24 r25:   8 r26:  38 r27:   7 r28:   4 r29:   1 r30:  78 r31:  12 
x  :   3 y  :  53 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   4 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  36 ld    :  18 ldd   :   8 
ldi   :  57 lds   :   2 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  21 
movw  :   4 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   1 ori   :   1 out   :  13 pop   :   0 push  :   0 rcall :  31 
ret   :  11 reti  :   1 rjmp  :   9 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   1 sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  31 std   :   0 sts   :  11 sub   :   0 subi  :   3 
swap  :   1 tst   :   0 wdr   :   1 
Instructions used: 40 out of 117 (34.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031a    766     28    794  131072   0.6%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
