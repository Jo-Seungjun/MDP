;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <alcd.h>
;
;#define BUF_SIZE 16
;#define QUEUE_SIZE 32
;
;void tx_trans(int, char);
;
;volatile unsigned char sbuf[BUF_SIZE];
;
;char data0, data1;
;
;interrupt [USART0_RXC] void usart0_rx_isr(void){
; 0000 000F interrupt [19] void usart0_rx_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010     //char data0;
; 0000 0011     //char status, data;
; 0000 0012     //status = UCSR0A;
; 0000 0013     data0 = UDR0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0014     tx_trans(1,data0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0015     //lcd_putchar(data0);
; 0000 0016     //qput0(UDR0);
; 0000 0017 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;interrupt [USART1_RXC] void usart1_rx_isr(void){
; 0000 0019 interrupt [31] void usart1_rx_isr(void){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001A     //char status, data;
; 0000 001B     //status = UCSR01A;
; 0000 001C     //char data1;
; 0000 001D     //status = UCSR1A;
; 0000 001E     data1 = UDR1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001F     tx_trans(0,data1);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0020     lcd_putchar(data1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0021     //qput0(UDR1);
; 0000 0022 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void tx_trans(int tx_port, char data){
; 0000 0024 void tx_trans(int tx_port, char data){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0025     switch(tx_port)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	tx_port -> R18,R19
;	data -> R17
;PCODE: $0000002B VOL: 0
; 0000 0026     {
; 0000 0027         case 0:
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0028             //while(!(UCSR1A & 0x80));
; 0000 0029             while(!(UCSR0A & 0x20));
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002A             UDR0 = data;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B             break;
;PCODE: $00000036 VOL: 0
; 0000 002C         case 1:
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002D             //while(!(UCSR0A & 0x80));
; 0000 002E             while(!(UCSR1A & 0x20));
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002F             UDR1 = data;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0030             break;
;PCODE: $00000042 VOL: 0
; 0000 0031         default:
;PCODE: $00000043 VOL: 0
; 0000 0032             break;
;PCODE: $00000044 VOL: 0
; 0000 0033     }
;PCODE: $00000045 VOL: 0
; 0000 0034 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void tx_str_trans(int tx_port, unsigned char *tx_str){
; 0000 0036 void tx_str_trans(int tx_port, unsigned char *tx_str){
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0037     int i = 0;
; 0000 0038     while(*(tx_str+i) != '\0')
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	tx_port -> R20,R21
;	*tx_str -> R18,R19
;	i -> R16,R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0039     {
; 0000 003A         tx_trans(tx_port,*(tx_str+i));
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003B         i++;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003C     }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003D }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;void init(){
; 0000 003F void init(){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0040     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0041     UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0042     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0043     UBRR0H=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0044     UBRR0L=0x67;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0045 
; 0000 0046     UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0047     UCSR1B=(1<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0048     UCSR1C=(0<<UMSEL1) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0049     UBRR1H=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004A     UBRR1L=0x67;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 004B 
; 0000 004C     lcd_init(16);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 004D     #asm("sei")
;PCODE: $0000007D VOL: 0
; 0000 004E }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;void main(){
; 0000 0050 void main(){
;PCODE: $00000080 VOL: 0
; 0000 0051     init();
;PCODE: $00000081 VOL: 0
; 0000 0052 
; 0000 0053     lcd_init(16);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0054     lcd_clear();
;PCODE: $00000084 VOL: 0
; 0000 0055 
; 0000 0056     while(1)
;PCODE: $00000085 VOL: 0
; 0000 0057     {
; 0000 0058     }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0059 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
